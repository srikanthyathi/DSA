#include <stdio.h>
#include <stdlib.h>

// Define a structure for a node in the linked list
struct Node {
    int data;
    struct Node* next;
};

// Function to insert a new node at the end of a linked list
void insert(struct Node** head_ref, int new_data) {
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));
    struct Node* last = *head_ref;
    new_node->data = new_data;
    new_node->next = NULL;
    if (*head_ref == NULL) {
        *head_ref = new_node;
        return;
    }
    while (last->next != NULL)
        last = last->next;
    last->next = new_node;
    return;
}

// Function to compare two linked lists
int compareLists(struct Node* head1, struct Node* head2) {
    while (head1 != NULL && head2 != NULL) {
        if (head1->data != head2->data)
            return 0; // Lists are not the same
        head1 = head1->next;
        head2 = head2->next;
    }
    // If one list is longer than the other
    if (head1 != NULL || head2 != NULL)
        return 0; // Lists are not the same
    return 1; // Lists are the same
}

// Function to print the linked list
void printList(struct Node* node) {
    while (node != NULL) {
        printf("%d ", node->data);
        node = node->next;
    }
    printf("\n");
}

int main() {
    struct Node* head1 = NULL;
    struct Node* head2 = NULL;
    
    // Populate first linked list
    insert(&head1, 1);
    insert(&head1, 2);
    insert(&head1, 3);

    // Populate second linked list
    insert(&head2, 1);
    insert(&head2, 2);
    insert(&head2, 3);

    // Print the lists
    printf("First linked list: ");
    printList(head1);
    printf("Second linked list: ");
    printList(head2);

    // Compare the lists
    if (compareLists(head1, head2))
        printf("The lists are the same.\n");
    else
        printf("The lists are not the same.\n");

    return 0;
}
